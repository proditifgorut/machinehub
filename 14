import { enableNextSidebar } from '../dashboard-handlers.js';
import { faker } from '@faker-js/faker';

function getAlgorithmSpecificParams(algorithm) {
    if (!algorithm) return '';

    switch (algorithm.type) {
        case 'classification':
            return `
                <div>
                  <label for="target-column" class="block text-sm font-semibold text-slate-700 mb-2">Kolom Target</label>
                  <select id="target-column" class="input-field"></select>
                </div>
            `;
        case 'regression':
            return `
                <div>
                  <label for="target-column" class="block text-sm font-semibold text-slate-700 mb-2">Kolom Target</label>
                  <select id="target-column" class="input-field"></select>
                </div>
            `;
        case 'clustering':
            return `
                <div>
                  <label for="num-clusters" class="block text-sm font-semibold text-slate-700 mb-2">Jumlah Cluster (K)</label>
                  <input type="number" id="num-clusters" value="3" min="2" class="input-field">
                </div>
            `;
        default:
            return '';
    }
}

function getEvaluationMetrics(algorithm, results) {
    if (!algorithm) return '';

    switch (algorithm.type) {
        case 'regression':
            return `
                <div class="grid md:grid-cols-2 gap-4 mb-8">
                    <div class="bg-gradient-to-br from-blue-500 to-blue-700 text-white rounded-xl p-6">
                        <div class="text-sm opacity-90 mb-1">Mean Squared Error (MSE)</div>
                        <div class="text-3xl font-bold">${results.mse.toFixed(4)}</div>
                    </div>
                    <div class="bg-gradient-to-br from-green-500 to-green-700 text-white rounded-xl p-6">
                        <div class="text-sm opacity-90 mb-1">R-squared (RÂ²)</div>
                        <div class="text-3xl font-bold">${results.r2.toFixed(4)}</div>
                    </div>
                </div>
            `;
        case 'classification':
            return `
                <div class="grid md:grid-cols-4 gap-4 mb-8">
                    <div class="bg-gradient-to-br from-green-500 to-green-700 text-white rounded-xl p-6">
                        <div class="text-sm opacity-90 mb-1">Akurasi</div>
                        <div class="text-3xl font-bold">${(results.accuracy * 100).toFixed(2)}%</div>
                    </div>
                    <div class="bg-gradient-to-br from-blue-500 to-blue-700 text-white rounded-xl p-6">
                        <div class="text-sm opacity-90 mb-1">Presisi</div>
                        <div class="text-3xl font-bold">${(results.precision * 100).toFixed(2)}%</div>
                    </div>
                    <div class="bg-gradient-to-br from-purple-500 to-purple-700 text-white rounded-xl p-6">
                        <div class="text-sm opacity-90 mb-1">Recall</div>
                        <div class="text-3xl font-bold">${(results.recall * 100).toFixed(2)}%</div>
                    </div>
                    <div class="bg-gradient-to-br from-orange-500 to-orange-700 text-white rounded-xl p-6">
                        <div class="text-sm opacity-90 mb-1">F1 Score</div>
                        <div class="text-3xl font-bold">${(results.f1 * 100).toFixed(2)}%</div>
                    </div>
                </div>
                <div class="bg-slate-50 border-2 border-slate-200 rounded-xl p-8">
                    <h3 class="text-lg font-bold text-slate-800 mb-4 text-center">Confusion Matrix</h3>
                    <div class="max-w-md mx-auto">
                    <div class="grid grid-cols-2 gap-2">
                        <div class="bg-green-100 border-2 border-green-300 rounded-lg p-6 text-center">
                            <div class="text-2xl font-bold text-green-800">${results.cm.tp}</div>
                            <div class="text-xs text-green-600 mt-1">True Positive</div>
                        </div>
                        <div class="bg-red-100 border-2 border-red-300 rounded-lg p-6 text-center">
                            <div class="text-2xl font-bold text-red-800">${results.cm.fp}</div>
                            <div class="text-xs text-red-600 mt-1">False Positive</div>
                        </div>
                        <div class="bg-orange-100 border-2 border-orange-300 rounded-lg p-6 text-center">
                            <div class="text-2xl font-bold text-orange-800">${results.cm.fn}</div>
                            <div class="text-xs text-orange-600 mt-1">False Negative</div>
                        </div>
                        <div class="bg-blue-100 border-2 border-blue-300 rounded-lg p-6 text-center">
                            <div class="text-2xl font-bold text-blue-800">${results.cm.tn}</div>
                            <div class="text-xs text-blue-600 mt-1">True Negative</div>
                        </div>
                    </div>
                    </div>
                </div>
            `;
        case 'clustering':
             return `
                <div class="grid md:grid-cols-1 gap-4 mb-8">
                    <div class="bg-gradient-to-br from-teal-500 to-teal-700 text-white rounded-xl p-6">
                        <div class="text-sm opacity-90 mb-1">Silhouette Score</div>
                        <div class="text-3xl font-bold">${results.silhouette.toFixed(4)}</div>
                    </div>
                </div>
                <p class="text-center text-slate-600">Silhouette Score berkisar dari -1 hingga 1. Semakin mendekati 1, semakin baik clusternya.</p>
             `;
        default:
            return '<p class="text-center text-slate-500">Metrik evaluasi tidak tersedia untuk tipe algoritma ini.</p>';
    }
}


export function renderTrainSection(app) {
    if (!app.selectedAlgorithm) {
        return `<div class="text-center p-8 card"><h2 class="text-xl font-semibold">Algoritma belum dipilih</h2><p class="text-slate-600 mt-2">Silakan pilih algoritma terlebih dahulu untuk memulai training.</p></div>`;
    }
  return `
    <div class="space-y-8 fade-in opacity-0 translate-y-4 transition-all duration-500">
      <div>
        <h1 class="text-3xl font-bold text-slate-800 mb-2">Training & Evaluasi</h1>
        <p class="text-slate-600">Konfigurasi parameter dan latih model <b class="text-primary-600">${app.selectedAlgorithm.name}</b>.</p>
      </div>

      <div class="grid lg:grid-cols-2 gap-6">
        <!-- Panel Konfigurasi -->
        <div class="card">
          <h2 class="text-xl font-bold text-slate-800 mb-6">Konfigurasi Model</h2>
          
          <div class="space-y-5">
            <!-- Parameter Spesifik Algoritma -->
            ${getAlgorithmSpecificParams(app.selectedAlgorithm)}

            <!-- Train/Test Split -->
            <div>
              <label class="block text-sm font-semibold text-slate-700 mb-2">
                Rasio Pembagian Data Latih/Uji
              </label>
              <div class="flex items-center gap-4">
                <input type="range" id="split-ratio" min="50" max="90" value="80" class="flex-1 h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer">
                <span id="split-value" class="text-lg font-bold text-primary-600 w-16 text-right">80%</span>
              </div>
              <div class="flex justify-between text-xs text-slate-500 mt-1">
                <span>Data Latih: <span id="train-percent">80%</span></span>
                <span>Data Uji: <span id="test-percent">20%</span></span>
              </div>
            </div>

            <!-- Random State -->
            <div>
              <label class="block text-sm font-semibold text-slate-700 mb-2">
                Random State (Seed)
              </label>
              <input type="number" id="random-state" value="42" class="input-field">
            </div>
          </div>

          <button id="train-model" class="btn-primary w-full mt-6 flex items-center justify-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
            Latih Model
          </button>
        </div>

        <!-- Status Training -->
        <div class="card">
          <h2 class="text-xl font-bold text-slate-800 mb-6">Status Training</h2>
          
          <div id="training-idle" class="text-center py-12">
            <svg class="w-20 h-20 text-slate-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
            <p class="text-slate-500">Klik 'Latih Model' untuk memulai</p>
          </div>

          <div id="training-progress" class="hidden">
            <div class="flex items-center justify-center mb-4">
              <div class="loader"></div>
            </div>
            <div class="text-center">
              <p class="text-lg font-semibold text-slate-700 mb-2">Training sedang berlangsung...</p>
            </div>
            <div class="mt-4 bg-slate-200 rounded-full h-2.5 overflow-hidden">
              <div id="progress-bar" class="bg-gradient-to-r from-primary-500 to-accent-500 h-full transition-all duration-300" style="width: 0%"></div>
            </div>
          </div>

          <div id="training-complete" class="hidden">
            <div class="text-center mb-6">
              <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <svg class="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <p class="text-xl font-bold text-slate-800">Training Selesai!</p>
            </div>

            <div class="space-y-3">
              <div class="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                <span class="text-sm font-medium text-slate-600">Waktu Training</span>
                <span id="training-time" class="font-bold text-slate-800">0s</span>
              </div>
              <div class="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                <span class="text-sm font-medium text-slate-600">Sampel Dilatih</span>
                <span id="samples-trained" class="font-bold text-slate-800">0</span>
              </div>
              <div class="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                <span class="text-sm font-medium text-slate-600">Sampel Diuji</span>
                <span id="samples-tested" class="font-bold text-slate-800">0</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Hasil Evaluasi Model -->
      <div id="evaluation-results" class="hidden">
        <div class="card">
          <h2 class="text-2xl font-bold text-slate-800 mb-6">Evaluasi Model</h2>
          <div id="metrics-container"></div>
          <div class="flex justify-end mt-6">
            <button id="view-visualizations" class="btn-primary flex items-center gap-2">
              Lihat Visualisasi
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  `;
}

export function initTrainHandlers(app) {
  const splitRatio = document.getElementById('split-ratio');
  const targetColumnSelect = document.getElementById('target-column');

  if (targetColumnSelect) {
      const options = app.preprocessedData.headers.map(h => `<option value="${h}">${h}</option>`).join('');
      targetColumnSelect.innerHTML = options;
  }
  
  splitRatio?.addEventListener('input', (e) => {
    const value = e.target.value;
    document.getElementById('split-value').textContent = `${value}%`;
    document.getElementById('train-percent').textContent = `${value}%`;
    document.getElementById('test-percent').textContent = `${100 - value}%`;
  });
  
  document.getElementById('train-model')?.addEventListener('click', () => {
    document.getElementById('training-idle').classList.add('hidden');
    document.getElementById('training-progress').classList.remove('hidden');
    document.getElementById('training-complete').classList.add('hidden');
    document.getElementById('evaluation-results').classList.add('hidden');
    
    let progress = 0;
    const interval = setInterval(() => {
      progress += 5;
      document.getElementById('progress-bar').style.width = `${progress}%`;
      
      if (progress >= 100) {
        clearInterval(interval);
        setTimeout(() => {
          document.getElementById('training-progress').classList.add('hidden');
          document.getElementById('training-complete').classList.remove('hidden');
          document.getElementById('evaluation-results').classList.remove('hidden');
          
          const trainingTime = (Math.random() * 3 + 1).toFixed(1);
          const totalRows = app.preprocessedData.rows.length;
          const split = parseInt(splitRatio.value) / 100;
          const trainCount = Math.floor(totalRows * split);
          const testCount = totalRows - trainCount;

          document.getElementById('training-time').textContent = `${trainingTime}s`;
          document.getElementById('samples-trained').textContent = trainCount;
          document.getElementById('samples-tested').textContent = testCount;

          // Generate fake results
          const results = generateFakeResults(app.selectedAlgorithm, testCount);
          app.modelResults = results;
          
          document.getElementById('metrics-container').innerHTML = getEvaluationMetrics(app.selectedAlgorithm, results);
          enableNextSidebar('visualize');

        }, 500);
      }
    }, 100);
  });
  
  document.getElementById('view-visualizations')?.addEventListener('click', () => {
    document.querySelector('[data-section="visualize"]').click();
  });
}

function generateFakeResults(algorithm, testCount) {
    const results = {};
    if (algorithm.type === 'regression') {
        results.mse = faker.number.float({ min: 0.01, max: 0.5 });
        results.r2 = faker.number.float({ min: 0.7, max: 0.98 });
        results.predictions = Array.from({ length: testCount }, () => ({
            actual: faker.number.float({ min: 50, max: 500 }),
            predicted: faker.number.float({ min: 50, max: 500 })
        }));
    } else if (algorithm.type === 'classification') {
        const tp = faker.number.int({ min: Math.floor(testCount*0.7), max: Math.floor(testCount*0.9) });
        const tn = faker.number.int({ min: Math.floor(testCount*0.05), max: Math.floor(testCount*0.1) });
        const fp = faker.number.int({ min: 1, max: Math.floor(testCount*0.05) });
        const fn = testCount - tp - tn - fp;
        results.cm = { tp, tn, fp, fn: fn > 0 ? fn : 0 };
        results.accuracy = (tp + tn) / testCount;
        results.precision = tp / (tp + fp);
        results.recall = tp / (tp + (fn > 0 ? fn : 0));
        results.f1 = 2 * (results.precision * results.recall) / (results.precision + results.recall);
        results.roc = {
            fpr: [0, ...Array.from({length: 10}, () => faker.number.float({min: 0, max: 1})).sort(), 1],
            tpr: [0, ...Array.from({length: 10}, () => faker.number.float({min: 0, max: 1})).sort(), 1]
        };
        results.auc = faker.number.float({min: 0.85, max: 0.99});
    } else if (algorithm.type === 'clustering') {
        results.silhouette = faker.number.float({ min: 0.5, max: 0.9 });
    }

    // Common results
    results.featureImportance = app.preprocessedData.headers
        .filter(h => !isNaN(parseFloat(app.preprocessedData.rows[0][h])))
        .map(header => ({ feature: header, importance: Math.random() }))
        .sort((a, b) => b.importance - a.importance);

    return results;
}
