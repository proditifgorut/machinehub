import * as XLSX from 'xlsx';
import { loadSection, enableNextSidebar } from '../dashboard-handlers.js';

export function renderUploadSection() {
  return `
    <div class="space-y-8 fade-in opacity-0 translate-y-4 transition-all duration-500">
      <div>
        <h1 class="text-3xl font-bold text-slate-800 mb-2">Unggah Data Anda</h1>
        <p class="text-slate-600">Unggah file CSV atau Excel untuk memulai analisis machine learning Anda.</p>
      </div>

      <!-- Zona Unggah -->
      <div id="upload-zone" class="upload-zone">
        <div id="upload-idle">
          <svg class="w-16 h-16 text-slate-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          <h3 class="text-xl font-semibold text-slate-700 mb-2">Seret & Lepas file Anda di sini</h3>
          <p class="text-slate-500 mb-4">atau klik untuk mencari</p>
          <input type="file" id="file-input" accept=".csv,.xlsx,.xls" class="hidden">
          <button id="browse-btn" class="btn-primary">
            Cari File
          </button>
          <p class="text-sm text-slate-400 mt-4">Format yang didukung: CSV, Excel (.xlsx, .xls)</p>
        </div>
        <div id="upload-loading" class="hidden">
            <div class="loader mx-auto"></div>
            <p class="mt-4 text-slate-600">Memproses file...</p>
        </div>
      </div>

      <!-- Pratinjau Data -->
      <div id="data-preview" class="hidden">
        <div class="card">
          <div class="flex items-center justify-between mb-6">
            <div>
                <h2 class="text-2xl font-bold text-slate-800">Pratinjau Data</h2>
                <p id="file-name" class="text-sm text-slate-500"></p>
            </div>
            <button id="clear-data" class="text-red-600 hover:text-red-700 font-medium flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
              Hapus Data
            </button>
          </div>

          <!-- Info Dataset -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div class="bg-gradient-to-br from-primary-500 to-primary-700 text-white rounded-xl p-5">
              <div class="text-sm opacity-90 mb-1">Total Baris</div>
              <div id="total-rows" class="text-3xl font-bold">0</div>
            </div>
            <div class="bg-gradient-to-br from-accent-500 to-accent-700 text-white rounded-xl p-5">
              <div class="text-sm opacity-90 mb-1">Total Kolom</div>
              <div id="total-columns" class="text-3xl font-bold">0</div>
            </div>
            <div class="bg-gradient-to-br from-orange-500 to-orange-700 text-white rounded-xl p-5">
              <div class="text-sm opacity-90 mb-1">Nilai Kosong</div>
              <div id="missing-values" class="text-3xl font-bold">0</div>
            </div>
          </div>

          <!-- Tabel Data -->
          <div class="overflow-x-auto">
            <div class="text-sm text-slate-600 mb-3">Menampilkan 10 baris pertama</div>
            <div id="data-table" class="border border-slate-200 rounded-lg overflow-hidden"></div>
          </div>

          <div class="mt-6 flex justify-end">
            <button id="proceed-preprocess" class="btn-primary flex items-center gap-2">
              Lanjutkan ke Preprocessing
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  `;
}

export function initUploadHandlers(app) {
  const uploadZone = document.getElementById('upload-zone');
  const fileInput = document.getElementById('file-input');
  const browseBtn = document.getElementById('browse-btn');
  
  browseBtn.addEventListener('click', () => fileInput.click());
  
  ['dragenter', 'dragover'].forEach(eventName => {
    uploadZone.addEventListener(eventName, (e) => {
        e.preventDefault();
        uploadZone.classList.add('dragover');
    });
  });
  
  uploadZone.addEventListener('dragleave', () => uploadZone.classList.remove('dragover'));
  
  uploadZone.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadZone.classList.remove('dragover');
    const file = e.dataTransfer.files[0];
    if (file) handleFileUpload(file, app);
  });
  
  fileInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) handleFileUpload(file, app);
  });
  
  document.getElementById('clear-data')?.addEventListener('click', () => {
    app.data = null;
    app.preprocessedData = null;
    app.selectedAlgorithm = null;
    app.modelResults = null;
    loadSection('upload', document.getElementById('dashboard-content'), app);
    ['preprocess', 'algorithm', 'train', 'visualize'].forEach(section => {
        const button = document.querySelector(`.sidebar-link[data-section="${section}"]`);
        button.setAttribute('disabled', true);
    });
  });
  
  document.getElementById('proceed-preprocess')?.addEventListener('click', () => {
    document.querySelector('[data-section="preprocess"]').click();
  });
}

function handleFileUpload(file, app) {
  const uploadIdle = document.getElementById('upload-idle');
  const uploadLoading = document.getElementById('upload-loading');
  uploadIdle.classList.add('hidden');
  uploadLoading.classList.remove('hidden');

  const reader = new FileReader();
  
  reader.onload = (e) => {
    try {
        const fileExtension = file.name.split('.').pop().toLowerCase();
        let data;
        if (fileExtension === 'csv') {
            data = parseCSV(e.target.result);
        } else if (['xlsx', 'xls'].includes(fileExtension)) {
            data = parseExcel(e.target.result);
        } else {
            throw new Error('Format file tidak didukung.');
        }
        
        app.data = data;
        app.preprocessedData = JSON.parse(JSON.stringify(data)); // Deep copy for preprocessing
        displayDataPreview(data, file.name);
        enableNextSidebar('preprocess');
    } catch(error) {
        alert(`Gagal memproses file: ${error.message}`);
        uploadIdle.classList.remove('hidden');
        uploadLoading.classList.add('hidden');
    }
  };

  if (file.name.split('.').pop().toLowerCase() === 'csv') {
    reader.readAsText(file);
  } else {
    reader.readAsArrayBuffer(file);
  }
}

function parseCSV(content) {
  const lines = content.trim().replace(/\r/g, '').split('\n');
  const headers = lines[0].split(',').map(h => h.trim());
  const rows = [];
  
  for (let i = 1; i < lines.length; i++) {
    if(lines[i].trim() === '') continue;
    const values = lines[i].split(',').map(v => v.trim());
    const row = {};
    headers.forEach((header, index) => {
      row[header] = values[index] || '';
    });
    rows.push(row);
  }
  
  return { headers, rows };
}

function parseExcel(arrayBuffer) {
    const workbook = XLSX.read(arrayBuffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const json = XLSX.utils.sheet_to_json(worksheet);
    
    if (json.length === 0) {
        return { headers: [], rows: [] };
    }
    
    const headers = Object.keys(json[0]);
    return { headers, rows: json };
}

export function displayDataPreview(data, fileName) {
  document.getElementById('upload-zone').classList.add('hidden');
  document.getElementById('data-preview').classList.remove('hidden');
  
  document.getElementById('file-name').textContent = fileName;
  document.getElementById('total-rows').textContent = data.rows.length;
  document.getElementById('total-columns').textContent = data.headers.length;
  
  let missingCount = 0;
  data.rows.forEach(row => {
    Object.values(row).forEach(val => {
      if (val === null || val === undefined || val === '') missingCount++;
    });
  });
  document.getElementById('missing-values').textContent = missingCount;
  
  const tableContainer = document.getElementById('data-table');
  const previewRows = data.rows.slice(0, 10);
  
  let tableHTML = '<table class="min-w-full divide-y divide-slate-200">';
  tableHTML += '<thead class="bg-slate-50"><tr>';
  data.headers.forEach(header => {
    tableHTML += `<th class="px-4 py-3 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">${header}</th>`;
  });
  tableHTML += '</tr></thead><tbody class="bg-white divide-y divide-slate-200">';
  
  if (previewRows.length > 0) {
    previewRows.forEach(row => {
        tableHTML += '<tr>';
        data.headers.forEach(header => {
        tableHTML += `<td class="px-4 py-3 text-sm text-slate-600 truncate max-w-xs">${row[header] ?? '-'}</td>`;
        });
        tableHTML += '</tr>';
    });
  } else {
    tableHTML += `<tr><td colspan="${data.headers.length}" class="text-center py-4 text-slate-500">Tidak ada data untuk ditampilkan.</td></tr>`;
  }
  
  tableHTML += '</tbody></table>';
  tableContainer.innerHTML = tableHTML;
}
